import Gaffer
import GafferOSL
import IECore

Gaffer.Metadata.registerNodeValue( parent, "serialiser:milestoneVersion", 0, persistent=False )
Gaffer.Metadata.registerNodeValue( parent, "serialiser:majorVersion", 32, persistent=False )
Gaffer.Metadata.registerNodeValue( parent, "serialiser:minorVersion", 0, persistent=False )
Gaffer.Metadata.registerNodeValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

parent["frameRange"]["start"].setValue( 1002 )
parent["frameRange"]["end"].setValue( 2000 )
parent["variables"].addChild( Gaffer.CompoundDataPlug.MemberPlug( "projectName", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["variables"]["projectName"].addChild( Gaffer.StringPlug( "name", defaultValue = 'project:name', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["variables"]["projectName"].addChild( Gaffer.StringPlug( "value", defaultValue = 'default', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["variables"].addChild( Gaffer.CompoundDataPlug.MemberPlug( "projectRootDirectory", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["variables"]["projectRootDirectory"].addChild( Gaffer.StringPlug( "name", defaultValue = 'project:rootDirectory', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
parent["variables"]["projectRootDirectory"].addChild( Gaffer.StringPlug( "value", defaultValue = '$HOME/gaffer/projects/${project:name}', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_color_texture"] = GafferOSL.OSLShader( "as_color_texture" )
parent.addChild( __children["as_color_texture"] )
__children["as_color_texture"]["name"].setValue( 'texture2d/as_color_texture' )
__children["as_color_texture"]["type"].setValue( 'osl:shader' )
__children["as_color_texture"]["parameters"].addChild( Gaffer.FloatPlug( "U", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_color_texture"]["parameters"].addChild( Gaffer.FloatPlug( "V", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_color_texture"]["parameters"].addChild( Gaffer.StringPlug( "Filename", defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_color_texture"]["parameters"].addChild( Gaffer.StringPlug( "UDIM", defaultValue = 'off', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_color_texture"]["parameters"].addChild( Gaffer.StringPlug( "UDIMPrefix", defaultValue = '.tx', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_color_texture"]["parameters"].addChild( Gaffer.StringPlug( "UWrap", defaultValue = 'periodic', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_color_texture"]["parameters"].addChild( Gaffer.StringPlug( "VWrap", defaultValue = 'periodic', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_color_texture"]["parameters"].addChild( Gaffer.StringPlug( "Filter", defaultValue = 'smartcubic', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_color_texture"]["parameters"].addChild( Gaffer.FloatPlug( "UWidth", defaultValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_color_texture"]["parameters"].addChild( Gaffer.FloatPlug( "VWidth", defaultValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_color_texture"]["parameters"].addChild( Gaffer.FloatPlug( "UBlur", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_color_texture"]["parameters"].addChild( Gaffer.FloatPlug( "VBlur", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_color_texture"]["parameters"].addChild( Gaffer.IntPlug( "FirstChannel", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_color_texture"]["parameters"].addChild( Gaffer.FloatPlug( "Fill", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_color_texture"].addChild( Gaffer.Plug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_color_texture"]["out"].addChild( Gaffer.Color3fPlug( "ColorOut", direction = Gaffer.Plug.Direction.Out, defaultValue = IECore.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_color_texture"]["out"].addChild( Gaffer.FloatPlug( "AlphaOut", direction = Gaffer.Plug.Direction.Out, defaultValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_color_texture"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = IECore.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_color_texture"]["__uiPosition"].setValue( IECore.V2f( -9.0279789, -0.699998617 ) )
__children["as_disney_material"] = GafferOSL.OSLShader( "as_disney_material" )
parent.addChild( __children["as_disney_material"] )
__children["as_disney_material"]["name"].setValue( 'material/as_disney_material' )
__children["as_disney_material"]["type"].setValue( 'osl:surface' )
__children["as_disney_material"]["parameters"].addChild( Gaffer.V3fPlug( "Normal", defaultValue = IECore.V3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, interpretation = IECore.GeometricData.Interpretation.Vector ) )
__children["as_disney_material"]["parameters"].addChild( Gaffer.V3fPlug( "Tn", defaultValue = IECore.V3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, interpretation = IECore.GeometricData.Interpretation.Vector ) )
__children["as_disney_material"]["parameters"].addChild( Gaffer.Color3fPlug( "BaseColor", defaultValue = IECore.Color3f( 0.5, 0.5, 0.5 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_disney_material"]["parameters"].addChild( Gaffer.FloatPlug( "Subsurface", defaultValue = 0.0, minValue = 0.0, maxValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_disney_material"]["parameters"].addChild( Gaffer.FloatPlug( "Metallic", defaultValue = 0.0, minValue = 0.0, maxValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_disney_material"]["parameters"].addChild( Gaffer.FloatPlug( "Specular", defaultValue = 0.5, minValue = 0.0, maxValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_disney_material"]["parameters"].addChild( Gaffer.FloatPlug( "SpecularTint", defaultValue = 0.0, minValue = 0.0, maxValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_disney_material"]["parameters"].addChild( Gaffer.FloatPlug( "Anisotropic", defaultValue = 0.0, minValue = -1.0, maxValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_disney_material"]["parameters"].addChild( Gaffer.FloatPlug( "Roughness", defaultValue = 0.5, minValue = 0.0, maxValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_disney_material"]["parameters"].addChild( Gaffer.FloatPlug( "Sheen", defaultValue = 0.0, minValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_disney_material"]["parameters"].addChild( Gaffer.FloatPlug( "SheenTint", defaultValue = 0.5, minValue = 0.0, maxValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_disney_material"]["parameters"].addChild( Gaffer.FloatPlug( "Clearcoat", defaultValue = 0.0, minValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_disney_material"]["parameters"].addChild( Gaffer.FloatPlug( "ClearcoatGloss", defaultValue = 1.0, minValue = 0.0, maxValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_disney_material"].addChild( Gaffer.Plug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_disney_material"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = IECore.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["as_disney_material"]["__uiPosition"].setValue( IECore.V2f( 59.4385948, -4.98781967 ) )
parent["variables"]["projectName"]["name"].setFlags( Gaffer.Plug.Flags.ReadOnly, True )
parent["variables"]["projectRootDirectory"]["name"].setFlags( Gaffer.Plug.Flags.ReadOnly, True )
Gaffer.Metadata.registerNodeValue( __children["as_color_texture"], 'graphBookmarks:bookmarked', True )
__children["as_color_texture"].loadShader( "texture2d/as_color_texture", keepExistingValues=True )
__children["as_disney_material"].loadShader( "material/as_disney_material", keepExistingValues=True )


del __children

