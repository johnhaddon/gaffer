name: Version check
on: [ push ]
jobs:
  check:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v4
      with:
        # So that we get the branch for `GITHUB_HEAD_REF`.
        fetch-depth: 0
    - name: Check version
      run: |

        import os
        import re
        import subprocess
        import sys

        # Parses version number from the SConstruct file.
        def version() :

          versions = {}
          versionRe = re.compile( r"^(gaffer.*Version.*) = (\S+)" )
          with open( "SConstruct" ) as sconstruct :
            for line in sconstruct.readlines() :
              versionMatch = versionRe.match( line )
              if versionMatch :
                versions[versionMatch.group( 1 )] = versionMatch.group( 2 ).strip( "'\"" )

          return [
            int( versions["gafferMilestoneVersion"] ),
            int( versions["gafferMajorVersion"] ),
            int( versions["gafferMinorVersion"] ),
            int( versions["gafferPatchVersion"] ),
          ]

        # Get version number from the merge commit and from the
        # pull request source branch.

        mergeVersion = version()
        subprocess.check_call( [ "git", "checkout", "1.4_maintenance" ] ) #os.environ["GITHUB_HEAD_REF"] ] )
        sourceVersion = version()

        # These versions should match. The common case is that the pull request
        # source branch doesn't change the version, in which case we're just
        # checking that the pull request targets the appropriate maintenance branch
        # (the one with the matching version). But we also want to allow a PR to
        # change the version, which is why we check against the merge version rather
        # than against the target branch version.

        if sourceVersion != mergeVersion :
          sys.stderr.write(
            "Source branch version {} does not match merged version {}. Did you choose the wrong target branch?\n".format(
              ".".join( sourceVersion ),
              ".".join( mergeVersion )
            )
          )
          sys.exit( 1 )

      shell: python
